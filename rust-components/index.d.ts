/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface FileStats {
  size: number
  isFile: boolean
  isDirectory: boolean
  modified: number
}
export interface SearchOptions {
  caseSensitive?: boolean
  includeHidden?: boolean
  disableIgnore?: boolean
  disableGitignore?: boolean
  maxDepth?: number
  includePatterns?: Array<string>
  excludePatterns?: Array<string>
}
export interface SearchResult {
  filePath: string
  matches: Array<Match>
}
export interface Match {
  lineNumber: number
  columnStart: number
  columnEnd: number
  text: string
}
export interface OperationResult {
  name: string
  durationMs: number
  memoryDeltaBytes: number
}
export interface BenchmarkResult {
  rustTimeMs: number
  nodeTimeMs: number
  speedup: number
}
export interface MetricsSummary {
  memoryUsageMb: number
  activeOperations: number
}
export interface ContextRequest {
  filePath?: string
  projectPath?: string
  cursorPosition?: Position
  selectedText?: string
  includeSymbols?: boolean
}
export interface Position {
  line: number
  column: number
}
export interface Context {
  file: FileContext
  project: ProjectContext
  symbols: SymbolContext
  metadata: ContextMetadata
}
export interface FileContext {
  path: string
  contentPreview: string
  language: string
  imports: Array<string>
  exports: Array<string>
}
export interface ProjectContext {
  rootPath: string
  framework: string
  dependencies: Array<string>
  structureSummary: string
}
export interface SymbolContext {
  definitions: Array<string>
  references: Array<string>
  types: Array<string>
}
export interface ContextMetadata {
  preparationTimeMs: number
  totalTokens: number
}
export interface Task {
  taskType: string
  complexity: number
  contextSize: number
  requiresWeb: boolean
}
export interface ModelSelection {
  modelId: string
  reasoning: string
}
export declare class RustFileOperations {
  constructor()
  readFile(path: string): Promise<Buffer>
  writeFile(path: string, data: Buffer): Promise<void>
  readDir(path: string): Promise<Array<string>>
  stat(path: string): Promise<FileStats>
}
export declare class SearchEngine {
  constructor()
  searchPattern(rootPath: string, pattern: string, options?: SearchOptions | undefined | null): Promise<Array<SearchResult>>
  searchFiles(rootPath: string, filePattern: string): Promise<Array<string>>
}
export declare class PerformanceMonitor {
  constructor()
  startOperation(name: string): string
  endOperation(operationId: string): OperationResult
  benchmarkFileRead(path: string): Promise<BenchmarkResult>
  getMetricsSummary(): MetricsSummary
}
export type AIOrchestrator = AiOrchestrator
export declare class AiOrchestrator {
  constructor()
  prepareContext(request: ContextRequest): Promise<Context>
  cacheContext(key: string, context: Context): Promise<void>
  getCachedContext(key: string): Promise<Context | null>
  routeToModel(task: Task): Promise<ModelSelection>
}
export type CmdShiftAI = CmdShiftAi
export declare class CmdShiftAi {
  constructor()
  getVersion(): Promise<string>
}
